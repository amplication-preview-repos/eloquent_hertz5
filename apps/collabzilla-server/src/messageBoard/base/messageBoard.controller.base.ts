/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MessageBoardService } from "../messageBoard.service";
import { MessageBoardCreateInput } from "./MessageBoardCreateInput";
import { MessageBoard } from "./MessageBoard";
import { MessageBoardFindManyArgs } from "./MessageBoardFindManyArgs";
import { MessageBoardWhereUniqueInput } from "./MessageBoardWhereUniqueInput";
import { MessageBoardUpdateInput } from "./MessageBoardUpdateInput";

export class MessageBoardControllerBase {
  constructor(protected readonly service: MessageBoardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MessageBoard })
  async createMessageBoard(
    @common.Body() data: MessageBoardCreateInput
  ): Promise<MessageBoard> {
    return await this.service.createMessageBoard({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MessageBoard] })
  @ApiNestedQuery(MessageBoardFindManyArgs)
  async messageBoards(@common.Req() request: Request): Promise<MessageBoard[]> {
    const args = plainToClass(MessageBoardFindManyArgs, request.query);
    return this.service.messageBoards({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MessageBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async messageBoard(
    @common.Param() params: MessageBoardWhereUniqueInput
  ): Promise<MessageBoard | null> {
    const result = await this.service.messageBoard({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MessageBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMessageBoard(
    @common.Param() params: MessageBoardWhereUniqueInput,
    @common.Body() data: MessageBoardUpdateInput
  ): Promise<MessageBoard | null> {
    try {
      return await this.service.updateMessageBoard({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MessageBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMessageBoard(
    @common.Param() params: MessageBoardWhereUniqueInput
  ): Promise<MessageBoard | null> {
    try {
      return await this.service.deleteMessageBoard({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
