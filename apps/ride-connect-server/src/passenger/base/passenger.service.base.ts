/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Passenger as PrismaPassenger } from "@prisma/client";

export class PassengerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PassengerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.passenger.count(args);
  }

  async passengers(
    args: Prisma.PassengerFindManyArgs
  ): Promise<PrismaPassenger[]> {
    return this.prisma.passenger.findMany(args);
  }
  async passenger(
    args: Prisma.PassengerFindUniqueArgs
  ): Promise<PrismaPassenger | null> {
    return this.prisma.passenger.findUnique(args);
  }
  async createPassenger(
    args: Prisma.PassengerCreateArgs
  ): Promise<PrismaPassenger> {
    return this.prisma.passenger.create(args);
  }
  async updatePassenger(
    args: Prisma.PassengerUpdateArgs
  ): Promise<PrismaPassenger> {
    return this.prisma.passenger.update(args);
  }
  async deletePassenger(
    args: Prisma.PassengerDeleteArgs
  ): Promise<PrismaPassenger> {
    return this.prisma.passenger.delete(args);
  }
}
